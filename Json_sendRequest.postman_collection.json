{
	"info": {
		"_postman_id": "c942237b-5b7e-4efb-beca-60a384fa9ff5",
		"name": "Домашнее задание №3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25472071"
	},
	"item": [
		{
			"name": "Add Pet with Random ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Added pet is not empty\", function () {\r",
							"    pm.expect(jsonData).not.to.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.environment.set(\"newPetId1\", jsonData.id);\r",
							"\r",
							"pm.test(\"Environment pet id is equal to pet id\", function () {\r",
							"    pm.expect(parseInt(pm.environment.get(\"newPetId1\"))).to.equal(\r",
							"        pm.response.json().id\r",
							"    );\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Crash\",\n  \"photoUrls\": [ \"https://i2-prod.dailystar.co.uk/tech/gaming/article21695234.ece/ALTERNATES/s1200c/0_CrashBandicoot.jpg\"],\n  \"id\": {{$randomInt}},\n  \"category\": {\n    \"id\": 1,\n    \"name\": \"Bandicoot\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"1\",\n      \"name\": \"Two-legs animals\"\n    },\n    {\n      \"id\": \"212\",\n      \"name\": \"marsupial\"\n    }\n  ],\n  \"status\": \"available\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/pet",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"pet"
					]
				}
			},
			"response": [
				{
					"name": "Invalid input",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: oauth2",
								"key": "Authorization",
								"value": "<token>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"status": "Method Not Allowed",
					"code": 405,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Get pet info and sell it",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"var currentUrl = pm.collectionVariables.get(\"baseUrl\") + \"/pet/\";\r",
							"\r",
							"\r",
							"\r",
							"// Меняем значение параметра \"status\" на \"sold\"\r",
							"jsonData.status = \"sold\";\r",
							"\r",
							"// Отправляем новый запрос PUT/pet\r",
							"pm.sendRequest({\r",
							"    url: \"https://example.com/pet\",\r",
							"    method: \"PUT\",\r",
							"    header: {\r",
							"        \"Content-Type\": \"application/json\"\r",
							"    },\r",
							"    body: {\r",
							"        mode: \"raw\",\r",
							"        raw: JSON.stringify(responseBody)\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    // Делаем что-то с результатом запроса, например, выводим его в консоль\r",
							"    console.log(res);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status is ok, response is json\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Pet info contains some tags\", function() {\r",
							"    let tags = jsonData.tags;\r",
							"    pm.expect(tags).not.to.be.empty;\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "key",
							"value": "",
							"type": "string"
						},
						{
							"key": "value",
							"value": "",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/pet/{{newPetId1}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"pet",
						"{{newPetId1}}"
					]
				},
				"description": "Returns a single pet"
			},
			"response": [
				{
					"name": "successful operation",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "Added as a part of security scheme: apikey",
								"key": "api_key",
								"value": "<API Key>"
							}
						],
						"url": {
							"raw": "{{petstoreBaseUrl}}/pet/{{newPetId1}}",
							"host": [
								"{{petstoreBaseUrl}}"
							],
							"path": [
								"pet",
								"{{newPetId1}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n    \"mollit nulla\",\n    \"eiusmod\"\n  ],\n  \"id\": 88774826,\n  \"category\": {\n    \"id\": 21280817,\n    \"name\": \"ea in reprehenderit ad esse\"\n  },\n  \"tags\": [\n    {\n      \"id\": 15316162,\n      \"name\": \"ut non pariatur adipisicing\"\n    },\n    {\n      \"id\": 85937657,\n      \"name\": \"consequat\"\n    }\n  ],\n  \"status\": \"available\"\n}"
				},
				{
					"name": "Invalid ID supplied",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "Added as a part of security scheme: apikey",
								"key": "api_key",
								"value": "<API Key>"
							}
						],
						"url": {
							"raw": "{{petstoreBaseUrl}}/pet/{{newPetId1}}",
							"host": [
								"{{petstoreBaseUrl}}"
							],
							"path": [
								"pet",
								"{{newPetId1}}"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Pet not found",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "Added as a part of security scheme: apikey",
								"key": "api_key",
								"value": "<API Key>"
							}
						],
						"url": {
							"raw": "{{petstoreBaseUrl}}/pet/{{newPetId1}}",
							"host": [
								"{{petstoreBaseUrl}}"
							],
							"path": [
								"pet",
								"{{newPetId1}}"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Confirm that pet sells with sendRequest script",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status is ok, response is json\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Pet info contains some tags\", function() {\r",
							"    let tags = jsonData.tags;\r",
							"    pm.expect(tags).not.to.be.empty;\r",
							"})\r",
							"\r",
							"pm.test(\"Pet name is Crash (english)\", function() {\r",
							"    let name = jsonData.name;\r",
							"    pm.expect(name).to.eql(\"Crash\")\r",
							"})\r",
							"\r",
							"pm.test(\"Pet status is sold\", function() {\r",
							"    \r",
							"    let statusData = jsonData.status;\r",
							"    pm.expect(statusData).to.eql(\"sold\")\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "key",
							"value": "",
							"type": "string"
						},
						{
							"key": "value",
							"value": "",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/pet/{{newPetId1}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"pet",
						"{{newPetId1}}"
					]
				},
				"description": "Returns a single pet"
			},
			"response": [
				{
					"name": "successful operation",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "Added as a part of security scheme: apikey",
								"key": "api_key",
								"value": "<API Key>"
							}
						],
						"url": {
							"raw": "{{petstoreBaseUrl}}/pet/{{newPetId1}}",
							"host": [
								"{{petstoreBaseUrl}}"
							],
							"path": [
								"pet",
								"{{newPetId1}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n    \"mollit nulla\",\n    \"eiusmod\"\n  ],\n  \"id\": 88774826,\n  \"category\": {\n    \"id\": 21280817,\n    \"name\": \"ea in reprehenderit ad esse\"\n  },\n  \"tags\": [\n    {\n      \"id\": 15316162,\n      \"name\": \"ut non pariatur adipisicing\"\n    },\n    {\n      \"id\": 85937657,\n      \"name\": \"consequat\"\n    }\n  ],\n  \"status\": \"available\"\n}"
				},
				{
					"name": "Invalid ID supplied",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "Added as a part of security scheme: apikey",
								"key": "api_key",
								"value": "<API Key>"
							}
						],
						"url": {
							"raw": "{{petstoreBaseUrl}}/pet/{{newPetId1}}",
							"host": [
								"{{petstoreBaseUrl}}"
							],
							"path": [
								"pet",
								"{{newPetId1}}"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Pet not found",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "Added as a part of security scheme: apikey",
								"key": "api_key",
								"value": "<API Key>"
							}
						],
						"url": {
							"raw": "{{petstoreBaseUrl}}/pet/{{newPetId1}}",
							"host": [
								"{{petstoreBaseUrl}}"
							],
							"path": [
								"pet",
								"{{newPetId1}}"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://petstore.swagger.io/v2",
			"type": "string"
		},
		{
			"value": "",
			"type": "string",
			"disabled": true
		}
	]
}